---
source: gtree_macro/src/lib.rs
expression: ok.to_token_stream()
---
{ { let id = IdStr :: from (root) ; let edges = vec ! [] ; let children = vec ! [{ let id = IdStr :: from (x111x) ; let edges = vec ! [std :: rc :: Rc :: new ((ccsa_macro_prelude :: common :: im :: vector ! [ccsa_macro_prelude :: ccsa :: CCSS :: new (ccsa_macro_prelude :: ccsa :: CCSSSvvOpSvvExpr :: new (ccsa_macro_prelude :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (ccsa_macro_prelude :: ccsa :: NameCharsOrNumber :: Id (ccsa_macro_prelude :: common :: IdStr :: new ("b1"))) , :: std :: option :: Option :: Some (ccsa_macro_prelude :: ccsa :: PredVariable (ccsa_macro_prelude :: common :: IdStr :: new ("right")))) , vec ! []) , vec ! [ccsa_macro_prelude :: ccsa :: CCSSEqExpression :: new (ccsa_macro_prelude :: ccsa :: PredEq :: Eq , ccsa_macro_prelude :: ccsa :: CCSSSvvOpSvvExpr :: new (ccsa_macro_prelude :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (ccsa_macro_prelude :: ccsa :: NameCharsOrNumber :: Id (ccsa_macro_prelude :: common :: IdStr :: new ("b2"))) , :: std :: option :: Option :: Some (ccsa_macro_prelude :: ccsa :: PredVariable (ccsa_macro_prelude :: common :: IdStr :: new ("left")))) , vec ! []))] , :: std :: option :: Option :: None)] , ccsa_macro_prelude :: common :: im :: vector ! [ccsa_macro_prelude :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (ccsa_macro_prelude :: ccsa :: NameCharsOrNumber :: Id (ccsa_macro_prelude :: common :: IdStr :: new ("b1"))) , :: std :: option :: Option :: None) , ccsa_macro_prelude :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (ccsa_macro_prelude :: ccsa :: NameCharsOrNumber :: Id (ccsa_macro_prelude :: common :: IdStr :: new ("b2"))) , :: std :: option :: Option :: None)])) as std :: rc :: Rc < dyn Shaping < EmgEdgeItem < _ >> > , std :: rc :: Rc :: new (h (px (11))) as std :: rc :: Rc < dyn Shaping < EmgEdgeItem < _ >> >] ; let children = vec ! [] ; Layer :: new (id . clone ()) . tree_init_calling (& id , & edges , & children) . with_id_edge_children (id , Some (edges) , Some (children)) }] ; Layer :: new (id . clone ()) . tree_init_calling (& id , & edges , & children) . with_id_edge_children (id , Some (edges) , Some (children)) } }
