---
source: gtree_macro/src/lib.rs
expression: ok.to_token_stream()
---
{ { let id = IdStr :: from (root) ; let edges = vec ! [] ; let children = vec ! [{ let id = IdStr :: from (x111x) ; let edges = vec ! [std :: rc :: Rc :: new ((emg_bind :: common :: im :: vector ! [emg_bind :: layout :: ccsa :: CCSS :: new (emg_bind :: layout :: ccsa :: CCSSSvvOpSvvExpr :: new (emg_bind :: layout :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (emg_bind :: layout :: ccsa :: NameCharsOrNumber :: Id (emg_bind :: common :: IdStr :: new ("b1"))) , :: std :: option :: Option :: Some (emg_bind :: layout :: ccsa :: PredVariable (emg_bind :: common :: IdStr :: new ("right")))) , vec ! []) , vec ! [emg_bind :: layout :: ccsa :: CCSSEqExpression :: new (emg_bind :: layout :: ccsa :: PredEq :: Eq , emg_bind :: layout :: ccsa :: CCSSSvvOpSvvExpr :: new (emg_bind :: layout :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (emg_bind :: layout :: ccsa :: NameCharsOrNumber :: Id (emg_bind :: common :: IdStr :: new ("b2"))) , :: std :: option :: Option :: Some (emg_bind :: layout :: ccsa :: PredVariable (emg_bind :: common :: IdStr :: new ("left")))) , vec ! []))] , :: std :: option :: Option :: None)] , emg_bind :: common :: im :: vector ! [emg_bind :: layout :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (emg_bind :: layout :: ccsa :: NameCharsOrNumber :: Id (emg_bind :: common :: IdStr :: new ("b1"))) , :: std :: option :: Option :: None) , emg_bind :: layout :: ccsa :: ScopeViewVariable :: new (:: std :: option :: Option :: None , :: std :: option :: Option :: Some (emg_bind :: layout :: ccsa :: NameCharsOrNumber :: Id (emg_bind :: common :: IdStr :: new ("b2"))) , :: std :: option :: Option :: None)])) as std :: rc :: Rc < dyn Shaping < EmgEdgeItem < _ >> > , std :: rc :: Rc :: new (h (px (11))) as std :: rc :: Rc < dyn Shaping < EmgEdgeItem < _ >> >] ; let children = vec ! [] ; Layer :: new (id . clone ()) . tree_init_calling (& id , & edges , & children) . with_id_edge_children (id , Some (edges) , Some (children)) }] ; Layer :: new (id . clone ()) . tree_init_calling (& id , & edges , & children) . with_id_edge_children (id , Some (edges) , Some (children)) } }
